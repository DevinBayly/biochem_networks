{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Graph.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Graph from \"./Graph.svelte\";\n  export let name;\n</script>\n\n<style>\n  img {\n    width: 20%;\n  }\n</style>\n\n<a href=\"http://rtdv-intake.glitch.me/\">\n  <img src=\"rtdvicon.png\" alt=\"\" />\n</a>\n<h1>Biochem Networks</h1>\n<p>\n  This project was produced to assist a UArizona Biochemistry PhD candidate\n  <a href=\"https://cbc.arizona.edu/directory/people/brittany-stankavich\">Brittany Stankavich</a> with her understanding of the relationships between\n  certain protein categories and their components.\n</p>\n<Graph />\n",
    "<script>\n  let distanceTool = 120;\n  let off = false;\n  let strengthTool = -50;\n  let threshold = 5;\n  import * as d3 from \"d3\";\n  import { colorCanvas } from \"./legend.js\";\n  let width = 5000;\n  let height = 5000;\n  let max = 0;\n  let createGraph = (data, svgArg) => {\n    //remove previous\n    d3.select(\"svg\").remove();\n    let nodes = [];\n    let links = [];\n    let existingNames = [];\n\n    for (let nodename in data) {\n      for (let othernode in data[nodename].edges) {\n        //now make as many edges are in the data\n        let el = {\n          source: nodename,\n          target: othernode,\n          value: data[nodename].edges[othernode].length\n        };\n        if (el.value >= threshold) {\n          links.push(el);\n          let node = {\n            id: nodename,\n            value: data[nodename].proteins.length * 5\n          };\n          if (existingNames.indexOf(node.id) == -1) {\n            nodes.push(node);\n            existingNames.push(node.id);\n          }\n        }\n        if (max < el.value) {\n          max = el.value;\n        }\n      }\n    }\n\n    const simulation = d3.forceSimulation(nodes);\n    console.log(simulation);\n\n    simulation.stop();\n    console.log(simulation);\n    let forces = simulation\n      .force(\n        \"link\",\n        d3\n          .forceLink(links)\n          .id(d => d.id)\n          .distance(1000)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-509))\n      .force(\"center\", d3.forceCenter(width / 2, height / 2));\n    const svg = svgArg.attr(\"viewBox\", [0, 0, width, height]);\n    svg.attr(\"height\",height/10)\n    svg.attr(\"width\",width/10)\n\n    console.log(simulation);\n\n    const zoom_group = svg.append(\"g\");\n\n    // make a color\n\n    const link = zoom_group\n      .append(\"g\")\n      .attr(\"stroke\", \"#999\")\n      .attr(\"stroke-opacity\", 0.6)\n      .selectAll(\"line\")\n      .data(links)\n      .join(\"line\")\n      .attr(\"stroke-width\", d => d.value)\n      .attr(\"stroke\", d => d3.interpolateViridis(d.value / max));\n\n    const node = zoom_group\n      .append(\"g\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1.5)\n      .selectAll(\"circle\")\n      .data(nodes)\n      .join(\"circle\")\n      .attr(\"r\", d => d.value)\n      .attr(\"fill\", \"black\")\n      .call(\n        d3\n          .drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended)\n      );\n    function dragstarted(d) {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart(); //sets the current target alpha to the specified number in the range [0,1].\n      d.fy = d.y; //fx - the node’s fixed x-position. Original is null.\n      d.fx = d.x; //fy - the node’s fixed y-position. Original is null.\n    }\n\n    //When the drag gesture starts, the targeted node is fixed to the pointer\n    function dragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n\n    //the targeted node is released when the gesture ends\n    function dragended(d) {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n\n      console.log(\"data after dragged is ...\", data);\n    }\n\n    zoom_group\n      .append(\"g\")\n      .selectAll(\"text\")\n      .data(nodes)\n      .enter()\n      .append(\"text\")\n      .text(d => d.id.replace(/hsa.*? /, \"\"))\n      .attr(\"x\", d => d.x + d.value)\n      .attr(\"y\", d => d.y + d.value)\n      .attr(\"dy\", 5);\n\n    let ticked = () => {\n      link\n        .attr(\"x1\", d => d.source.x)\n        .attr(\"y1\", d => d.source.y)\n        .attr(\"x2\", d => d.target.x)\n        .attr(\"y2\", d => d.target.y);\n\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n\n      zoom_group\n        .selectAll(\"text\")\n        .attr(\"x\", d => d.x + d.value)\n        .attr(\"y\", d => d.y + d.value)\n        .attr(\"dy\", 5);\n    };\n    setInterval(() => {\n      if (!off) {\n        simulation.tick();\n        ticked();\n        simulation.alpha(1);\n        simulation.restart();\n      }\n    }, 100);\n    d3.interval(() => {\n      simulation\n        .nodes(nodes)\n        .force(\"link\", d3.forceLink(links).distance(distanceTool))\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\n        .force(\"charge\", d3.forceManyBody().strength(strengthTool));\n    }, 2000);\n    svg.call(\n      d3\n        .zoom()\n        .extent([[0, 0], [width, height]])\n        .scaleExtent([1, 8])\n        .on(\"zoom\", zoomed)\n    );\n\n    function zoomed() {\n      zoom_group.attr(\"transform\", d3.event.transform);\n    }\n\n    return svg;\n  };\n\n  let data;\n  let svg;\n\n  let restart = () => {\n    svg = d3.select(\"#container\").append(\"svg\");\n    createGraph(data, svg);\n\n    setTimeout(() => {\n      colorCanvas();\n    }, 2000);\n  };\n  window.onload = async () => {\n    data = await fetch(\"./clean.json\").then(res => res.json());\n    svg = d3.select(\"#container\").append(\"svg\");\n    //let node = createGraph(data, svg);\n    let download = document.querySelector(\"#download\");\n    download.onclick = () => {\n      let a = document.createElement(\"a\");\n      a.href = URL.createObjectURL(new Blob([document.querySelector(\"svg\").outerHTML]))\n      a.download = \"ProteinNetwork.svg\";\n      a.click();\n    };\n    restart()\n  };\n  // download button code\n</script>\n\n<style>\n  #holder {\n    display: flex;\n  }\n  text {\n    text-anchor: middle;\n    font-family: \"Helvetica Neue\", Helvetica, sans-serif;\n    fill: #666;\n    font-size: 16px;\n  }\n</style>\n\n<div id=\"holder\">\n\n  <div id=\"container\" />\n  <div id=\"labels\">\n\n    <label>\n      Min shared protein count\n      <input\n        type=\"number\"\n        bind:value={threshold}\n        min=\"0\"\n        max=\"7\"\n        on:change={restart} />\n      <input\n        type=\"range\"\n        bind:value={threshold}\n        min=\"0\"\n        max=\"7\"\n        on:change={restart} />\n    </label>\n    <label>\n      Edge Length\n      <input type=\"number\" bind:value={distanceTool} min=\"0\" max=\"3000\" />\n      <input type=\"range\" bind:value={distanceTool} min=\"0\" max=\"3000\" />\n    </label>\n    <label>\n      Repulsion Strength\n      <input type=\"number\" bind:value={strengthTool} min=\"-10000\" max=\"400\" />\n      <input type=\"range\" bind:value={strengthTool} min=\"-10000\" max=\"400\" />\n    </label>\n    <label>\n      Stop animation\n      <input type=\"checkbox\" bind:checked={off} />\n    </label>\n    <button id=\"download\">Download svg</button>\n  </div>\n</div>\n<p>Number of shared elements in category</p>\n<div id=\"legend\">\n  <canvas />\n</div>\n"
  ],
  "names": [],
  "mappings": "AAME,GAAG,eAAC,CAAC,AACH,KAAK,CAAE,GAAG,AACZ,CAAC;AC8LD,OAAO,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC"
}